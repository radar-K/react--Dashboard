.js   ‚Äì Vanlig JavaScript-kod
.jsx  ‚Äì JavaScript med JSX (React-komponenter) syntaxf√∂rl√§ngning f√∂r JavaScript som g√∂r att du kan skriva HTML-liknande kod i JavaScript.
.ts   ‚Äì TypeScript (JavaScript med typkontroll) l√§gger till statiskt typkontroll.
.tsx  ‚Äì TypeScript med JSX 
.json ‚Äì Datafil i JSON-format () l√§ttviktigt format f√∂r att lagra och √∂verf√∂ra data, oftast i textformat. JSON √§r b√•de l√§sbart f√∂r m√§nniskor och l√§tt att bearbeta f√∂r maskiner. 
.md   ‚Äì Markdown f√∂r dokumentation



arrow function why & when //  onClick={() => onDelete(expenses.id)}
 Om vi anv√§nder onClick={onDelete(expenses.id)} utan en arrow function 
 skulle funktionen onDelete omedelbart anropas n√§r komponenten renderas, vilket inte √§r det vi vill.
 Vi vill ist√§llet att den ska anropas n√§r anv√§ndaren faktiskt klickar p√• knappen, och med en arrow function
 kan vi s√§kerst√§lla att det h√§nder vid r√§tt tillf√§lle.

___________________________________________________________________________________________________________________

| useState                                       | Anv√§nds f√∂r att lagra och uppdatera data   

const [state, setState] = useState(startv√§rde);

N√§r du anv√§nder useState, f√•r du tv√• saker:
üîπ count(ett v√§rde) ‚Üí Det nuvarande tillst√•ndet (state)
üîπ setCount(En funktion) ‚Üí En funktion som uppdaterar v√§rdet

üîπ useState(0) ‚Üí 0 √§r startv√§rdet

+------------------------------------------------+-------------------------------------------------------------------------------------+
| useReduce                                      | tar mer data √§n useState   
| 
| const [state, dispatch] = useReducer(reducer, initialState);
|
| state ‚Üí Det nuvarande v√§rdet.
| dispatch ‚Üí En funktion f√∂r att skicka en action (h√§ndelse) som √§ndrar state.
| reducer ‚Üí En funktion som definierar hur state ska uppdateras.
| initialState ‚Üí Startv√§rdet f√∂r state.
                                                                                         
+------------------------------------------------+-------------------------------------------------------------------------------------+
| useEffect                                      | Hj√§lper till att hantera saker som h√§nder "utanf√∂r" sj√§lva komponenten, som att prata med en server eller √§ndra DOM.                  
| 
üîπ F√∂rsta argumentet: Funktionen som k√∂rs vid render eller f√∂r√§ndring. // Vad som ska h√§nda.
üîπ Andra argumentet ([dependency]): Lista som styr n√§r funktionen k√∂rs. // N√§r det ska h√§nda (beroenden).

| useEffect(() => {
|  // Kod som k√∂rs vid render eller vid √§ndring av beroenden             useEffect(() => {...}, []) ‚Üí K√∂rs bara vid f√∂rsta renderingen.
| }, [dependency]);                                                      useEffect(() => {...}, [state]) ‚Üí K√∂rs n√§r state √§ndras.
|                                                                        useEffect(() => { return () => {...} }, []) ‚Üí K√∂r en cleanup n√§r komponenten tas bort.

N√§r ska man anv√§nda useEffect?
‚úÖ H√§mta data fr√•n en API (t.ex. fetch eller axios).
‚úÖ Uppdatera document.title eller manipulera DOM:en.
‚úÖ Lyssna p√• h√§ndelser (t.ex. resize, scroll, keydown).
‚úÖ St√§da upp resurser n√§r en komponent avmonteras.

                                                                                  
+------------------------------------------------+-------------------------------------------------------------------------------------+
|                                                |                                                                                             |
+------------------------------------------------+-------------------------------------------------------------------------------------+

